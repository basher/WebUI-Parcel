/**
 * Function for renaming static assets (e.g. removing "hashes" generated by Parcel bundler).
 *
 * @return {void}
 */

/* eslint-disable */
const fs = require('fs');
const path = require('path');
const cheerio = require('cheerio');
const validExt = require('./static-assets-config');
const distDirectoryPath = path.join(__dirname, '../../dist/theme-build');

// In PROD build step, read files in DIST folder, and process the valid ones.
if (process.env.NODE_ENV === 'PROD ') {
    fs.readdir(distDirectoryPath, (err, files) => {
        if (err) {
            return console.log(err);
        }

        // Match "dist" files with list of valid file extensions.
        validFiles = files.filter(ext =>
            validExt.includes(path.extname(ext).toLowerCase())
        );

        // Now rename files.
        validFiles.forEach(file => {
            processFile(file);
        });
    });
}

// Process valid files.
const processFile = file => {
    const ext = file.substring(file.lastIndexOf('.'));
    const hashed = file.substring(0, file.lastIndexOf('.'));
    let renamed = hashed.substring(0, hashed.lastIndexOf('.'));

    // JS. Don't rename polyfills & dynamically imported components, as they're correctly referenced inside the 'index.js' & 'legacy.js' files that this function generates.
    if (ext === '.js' && renamed === 'index') {
        readIndexHtml()
            .then(data => {
                // Use cheerio to parse HTML DOM.
                const $ = cheerio.load(data);
                const firstScript = $('script:first');
                const lastScript = $('script:last');

                // Rename modern bundle to "index.js" and legacy bundle to "legacy.js".
                if (file === firstScript.attr('src').substring(1)) {
                    renamed = firstScript.attr('type') === 'module'
                        ? `${renamed}${ext}`
                        : `legacy${ext}`;
                }

                if (file === lastScript.attr('src').substring(1)) {
                    renamed = lastScript.attr('type') === 'module'
                        ? `${renamed}${ext}`
                        : `legacy${ext}`;
                }

                renameFile(renamed, file);
            });

    }

    // CSS.
    if (ext === '.css') {
        renamed = `${renamed}${ext}`;
        renameFile(renamed, file);
    }

    // SVG.
    if (ext === '.svg') {
        renamed = `index${ext}`;
        renameFile(renamed, file);
    }
};

// Rename file.
const renameFile = (renamed, file) => {
    fs.rename(`${distDirectoryPath}/${file}`, `${distDirectoryPath}/${renamed}`, err => {
        if (err) {
            return console.log(err);
        }
        console.log('Successfully renamed static asset: ', file);
    });
};

// Read bundled "index.html" file contents.
const readIndexHtml = () =>
    new Promise((resolve, reject) => {
        fs.readFile(`${distDirectoryPath}/index.html`, 'utf8', (err, data) => {
            if (err) {
                reject(err);
            } else {
                resolve(data);
            }
        }
    );
});
